#!/bin/bash

log() {
  echo -e "\\033[34m\\033[1m[yadm bootstrap]\\033[0m $1"
}

log_and_exit() {
  log "$1" && exit
}

happy_cd() {
  cd "$1" || log_and_exit "Couldn't cd to $1"
}

command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Checks if brew is installed, then installs if if it's missing.
install_homebrew() {
  log "Installing homebrew..."

  if command -v brew >/dev/null 2>&1; then
    log "Homebrew already installed."
    return 0
  fi

  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}

install_homebrew_packages() {
  log "Installing Brewfile things..."
  brew bundle --global || log_and_exit "Couldn't brew bundle"
}

setup_tmux() {
  log "Setting up tmux..."

  if [ -d "$HOME/.tmux/plugins/tpm" ]; then
    log "Tmux tpm already installed."
    return 0
  fi

  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
}

install_ruby() {
  if [ -f "$(brew --prefix)/bin/ruby-install" ]; then
    rubies_count=`ls $HOME/.rubies | wc -l`

    if [ $rubies_count = 0 ]; then
      log "Installing Ruby..."
      ruby-install ruby -- --enable-shared || log_and_exit "Couldn't ruby-install ruby"
    fi
  else
    log "Couldn't find ruby-install. Skipping installation of Ruby."
    return 1
  fi

  if [[ ! -f "$(brew --prefix)/opt/chruby/share/chruby/chruby.sh" ]]; then
    log "Couldn't find chruby. Skipping installation of gems."
    return 1
  fi

  source "$(brew --prefix)/opt/chruby/share/chruby/chruby.sh"
  chruby ruby
  gem install bundler
  bundle
  log "Done with Ruby."
}

install_rust() {
  if [ -f $HOME/.cargo/bin/cargo ]; then
    log "Rust already installed. Skipping."
    return 0;
  fi

  log "Installing Rust..."
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  # Manually update the PATH
  export PATH=$PATH:$HOME/.cargo/bin
  rustup component add rust-analysis rust-src

  if [ ! -d "$HOME/.zfunc" ]; then
    mkdir "$HOME/.zfunc"
  fi

  rustup completions zsh > ~/.zfunc/_rustup

  log "Done with Rust."
}

setup_develop_dirs() {
  make_dir() {
    log "Making directory: $1"

    if [ -d "$1" ]; then
      mkdir "$1"
    else
      log "Already exists."
      return 0
    fi
  }

  make_dir ~/Development
  make_dir ~/Development/projects
  make_dir ~/Development/not_my_projects
}

setup_neovim() {
  if [ "$(command_exists \"pip3\")" ]; then
    log "Installing neovim python-client for pip3"
    pip3 install neovim
  fi

  if [ "$(command_exists \"pip2\")" ]; then
    log "Installing neovim python-client for pip2"
    pip2 install neovim
  fi

  if [ "$(command_exists \"pip\")" ]; then
    log "Installing neovim python-client for pip"
    pip install neovim
  fi

  # (Ruby neovim is handled in Gemfile)

  if [ -d "$HOME/.config/nvim" ]; then
    if command -v nvim >/dev/null 2>&1; then
      log "Installing vim-plug..."
      sh -c 'curl -fLo "${HOME}/.config/nvim/autoload/plug.vim --create-dirs \
         https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    fi
  fi
}

#------------------------------------------------------------------------------
# Do the things
#------------------------------------------------------------------------------
system_type=$(uname -s)

happy_cd "$HOME"

if [ "$system_type" = "Darwin" ]; then
  install_homebrew
  install_homebrew_packages
fi

setup_tmux
install_ruby
install_rust
setup_develop_dirs
setup_neovim
