#!/bin/bash

log_and_exit() {
  echo "[yadm bootstrap] $1" && exit
}

happy_cd() {
  cd "$1" || log_and_exit "Couldn't cd to $1"
}

# Checks if brew is installed, then installs if if it's missing.
install_homebrew() {
  echo "Installing homebrew..."

  if command -v brew >/dev/null 2>&1; then
    echo "Homebrew already installed."
    return 0
  fi

  /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
}

install_homebrew_packages() {
  echo "Installing Brewfile things..."
  brew bundle --global || log_and_exit "Couldn't brew bundle"
}

install_ruby() {
  if [ -f /usr/local/bin/ruby-install ]; then
    echo "Installing Ruby..."
    ruby-install ruby -- --enable-shared || log_and_exit "Couldn't ruby-install ruby"
  else
    echo "Couldn't find ruby-install. Skipping installation of Ruby."
    return 1
  fi

  if [[ -f /usr/local/opt/chruby/share/chruby/chruby.sh ]]; then
    echo "Couldn't find chruby. Skipping installation of gems."
    return 1
  fi

  source /usr/local/opt/chruby/share/chruby/chruby.sh
  chruby ruby
  gem install bundler
  bundle
  echo "Done with Ruby."
}

install_rust() {
  echo "Installing Rust..."
  curl https://sh.rustup.rs -sSf | sh
  rustup component add rls-preview rust-analysis rust-src
  cargo install -f ripgrep
  echo "Done with Rust."
}

setup_develop_dirs() {
  make_dir() {
    echo "Making directory: $1"

    if [ -d "$1" ]; then
      mkdir "$1"
    else
      echo "Already exists."
      return 0
    fi
  }

  make_dir ~/Development
  make_dir ~/Development/projects
  make_dir ~/Development/not_my_projects
}

#------------------------------------------------------------------------------
# Do the things
#------------------------------------------------------------------------------
system_type=$(uname -s)

happy_cd "$HOME"

if [ "$system_type" = "Darwin" ]; then
  install_homebrew
  install_homebrew_packages
fi

install_ruby
install_rust
setup_develop_dirs
